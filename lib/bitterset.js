// Generated by CoffeeScript 1.8.0
var ADDR_BITS, BitterSet, WORD_BITS, bits, bstring, highest, lowest, position, weight;

bstring = require('./bstring');

highest = require('./highest');

lowest = require('./lowest');

position = require('./position');

weight = require('./weight');

WORD_BITS = 32;

ADDR_BITS = 5;

bits = function(word, offset) {
  var bit, _i, _ref, _results;
  if (offset == null) {
    offset = 0;
  }
  _results = [];
  for (bit = _i = 0, _ref = WORD_BITS - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; bit = 0 <= _ref ? ++_i : --_i) {
    if ((word & (1 << bit)) !== 0x0) {
      _results.push(bit + offset * WORD_BITS);
    }
  }
  return _results;
};

module.exports = BitterSet = (function() {
  function BitterSet() {
    this.store = [];
  }

  BitterSet.prototype.get = function(bit) {
    return (this.store[bit >> ADDR_BITS] & (1 << bit)) !== 0x0;
  };

  BitterSet.prototype.set = function(bit) {
    this.store[bit >> ADDR_BITS] |= 1 << bit;
  };

  BitterSet.prototype.clear = function(bit) {
    if (bit != null) {
      this.store[bit >> ADDR_BITS] &= ~(1 << bit);
    } else {
      this.store = [];
    }
  };

  BitterSet.prototype.flip = function(bit) {
    this.store[bit >> ADDR_BITS] ^= 1 << bit;
  };

  BitterSet.prototype.next = function(value, from) {
    var bit, index, mask, offset, word;
    index = from >> ADDR_BITS;
    word = this.store[index] || 0;
    bit = 1 << from;
    mask = ~(bit - 1);
    if (value) {
      word &= mask;
    } else {
      word |= ~mask;
    }
    while (!(index >= this.store.length || ((value && word) || (!value && ~word)))) {
      index++;
      word = this.store[index] || 0;
    }
    if (value && index >= this.store.length) {
      return -1;
    }
    offset = index < this.store.length ? position(lowest(value, word)) : 0;
    return (index * WORD_BITS) + offset;
  };

  BitterSet.prototype.previous = function(value, from) {
    var bit, index, mask, offset, word;
    index = from >> ADDR_BITS;
    word = this.store[index] || 0;
    bit = 1 << from;
    mask = ((bit - 1) << 1) + 1;
    if (value) {
      word &= mask;
    } else {
      word |= ~mask;
    }
    while (!(index < 0 || ((value && word) || (!value && ~word)))) {
      index--;
      word = this.store[index] || 0;
    }
    if (index < 0) {
      return -1;
    }
    offset = position(highest(value, word));
    return (index * WORD_BITS) + offset;
  };

  BitterSet.prototype.length = function() {
    var fill, tail;
    this.cull();
    if (this.store.length === 0) {
      return 0;
    }
    fill = WORD_BITS * (this.store.length - 1);
    tail = bstring(this.store[this.store.length - 1]).length;
    return fill + tail;
  };

  BitterSet.prototype.cardinality = function() {
    var reducer;
    reducer = function(sum, word) {
      return sum + weight(word);
    };
    return this.store.reduce(reducer, 0);
  };

  BitterSet.prototype.cull = function() {
    var tail;
    while (this.store.length > 0) {
      tail = this.store[this.store.length - 1];
      if (!tail) {
        this.store.pop();
      } else {
        break;
      }
    }
  };

  BitterSet.prototype.or = function(set) {
    var i, _i, _ref;
    if (set === this) {
      return;
    }
    for (i = _i = 0, _ref = set.store.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.store[i] |= set.store[i];
    }
  };

  BitterSet.prototype.and = function(set) {
    var i, _i, _ref;
    if (set === this) {
      return;
    }
    for (i = _i = 0, _ref = this.store.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.store[i] &= set.store[i] || 0;
    }
    this.cull();
  };

  BitterSet.prototype.andnot = function(set) {
    var i, _i, _ref;
    if (set === this) {
      this.clear();
    } else {
      for (i = _i = 0, _ref = this.store.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.store[i] &= ~(set.store[i] || 0);
      }
      this.cull();
    }
  };

  BitterSet.prototype.xor = function(set) {
    var i, _i, _ref;
    if (set === this) {
      this.clear();
    } else {
      for (i = _i = 0, _ref = set.store.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.store[i] ^= set.store[i];
      }
      this.cull();
    }
  };

  BitterSet.prototype.toString = function() {
    var index, word;
    this.cull();
    return "\{" + ((function() {
      var _i, _len, _ref, _results;
      _ref = this.store;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        word = _ref[index];
        if ((word != null) && word !== 0) {
          _results.push(bits(word, index));
        }
      }
      return _results;
    }).call(this)) + "\}";
  };

  BitterSet.prototype.toBinaryString = function() {
    var reducer;
    this.cull();
    reducer = function(string, word, index) {
      var fill;
      fill = index > 0 ? Array(index * WORD_BITS - string.length + 1).join('0') : '';
      return bstring(word) + fill + string;
    };
    return this.store.reduce(reducer, '');
  };

  return BitterSet;

})();
